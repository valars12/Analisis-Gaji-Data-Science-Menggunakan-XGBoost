# -*- coding: utf-8 -*-
"""Program Analisis Gaji Data Science_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jDhCGc6UGoPXoEyw0H8csDBYD2Cstex-
"""

# pip install --upgrade scikit-learn xgboost

"""## **Import Library**"""

# Commented out IPython magic to ensure Python compatibility.
import warnings
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import joblib

# %matplotlib inline
sns.set()
sns.set_style("whitegrid",{"grid.color": ".6", "grid.linestyle": ":"})
sns.set_palette("blend:#7AB,#EDA")
warnings.filterwarnings('ignore')

"""## **Load Dataset**"""

df = pd.read_csv('/content/datascience_salaries.csv')

# Set pengaturan tampilan DataFrame
pd.set_option('display.max_columns', None)  # Menampilkan semua kolom pada data
pd.set_option('display.width', 1000)        # Menyesuaikan lebar tampilan
pd.set_option('display.colheader_justify', 'center')  # Merapikan header kolom sehingga terlihat rapi

# Menampilkan DataFrame
print(df)

"""## **Exploratory Data Analysis (EDA)**"""

df.info()

df.describe()

df.duplicated().sum()

print(df[df.duplicated()])

df.drop_duplicates(inplace = True)

df.drop_duplicates(inplace = True)
df.head()

df.isna().sum()

# Mengetahui nilai uniq atau variasi awal tentang wawasan terhadap data
print('--------No of Unique Values---------')
print('Column   :   Number of Unique Values')
print('------------------------------------')
for col in df.columns:
    unique_num = len(df[col].value_counts())
    print(f'{col} : {unique_num}')
print('------------------------------------')

df.remote_ratio.value_counts()

df.company_location.value_counts()

"""## **Data Vizualitation**"""

df['experience_level'].replace({'EN':'Entry-Level','MI':'Mid-Level','EX':'Executive Level','SE':'Senior'},inplace=True)
df['employment_type'].replace({'PT':'Part-Time','FT':'Full-Time','CT':'Contract','FL':'Freelance'},inplace=True)

plt.figure(figsize = (8,6))
sns.countplot(data = df,x = 'work_year', palette='viridis')
plt.xlabel("Work Year")
plt.ylabel("Count")
plt.title("Work Distribution")
plt.plot()

plt.figure(figsize = (8,6))
sns.countplot(data = df,x = 'experience_level', palette='magma')
plt.xlabel("Experience Level")
plt.ylabel("Count")
plt.title("Experience Distribution")
plt.plot()

remote_ratio_mean = df.groupby(['work_year', 'experience_level']).agg(mean_remote_ratio=('remote_ratio', 'mean'))
remote_ratio_mean.reset_index(inplace=True)

plt.figure(figsize=(12, 6))
sns.barplot(data=remote_ratio_mean,
            x='work_year',
            y='mean_remote_ratio',
            hue='experience_level')
plt.title('Mean of work done remotely')
plt.xlabel('Work year')
plt.ylabel('Mean remote ratio')
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
plt.show()

salary_in_usd_mean = df.groupby(['work_year', 'experience_level']).agg(mean_salary_in_usd=('salary_in_usd', 'mean'))
salary_in_usd_mean.reset_index(inplace=True)

plt.figure(figsize=(12, 6))
sns.barplot(data=salary_in_usd_mean,
            x='work_year',
            y='mean_salary_in_usd',
            hue='experience_level')
plt.title('Mean salary in USD')
plt.xlabel('Work year')
plt.ylabel('Mean salary in USD')
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
plt.show()

# Set style for plots
sns.set(style="whitegrid")

# Plotting the salary distribution in USD
plt.figure(figsize=(12, 6))
sns.histplot(df['salary_in_usd'], bins=30, kde=True, color='blue')
plt.title('Distribution of Salaries in USD')
plt.xlabel('Salary in USD')
plt.ylabel('Frequency')
plt.show()
print()

# Plotting the salary distribution in original currency
plt.figure(figsize=(12, 6))
sns.histplot(df['salary'], bins=30, kde=True, color='green')
plt.title('Distribution of Salaries in Original Currency')
plt.xlabel('Salary in Original Currency')
plt.ylabel('Frequency')
plt.show()

z=df['job_title'].value_counts().head(10)
fig=px.bar(z,x=z.index,y=z.values,color=z.index,text=z.values,labels={'index':'job title','y':'count','text':'count'},template='seaborn',title='<b> Top 10 Popular Roles in Data Sceince')
fig.show()

fig=px.bar(df.groupby('job_title',as_index=False)['salary_in_usd'].max().sort_values(by='salary_in_usd',ascending=False).head(10),x='job_title',y='salary_in_usd',color='job_title',labels={'job_title':'job title','salary_in_usd':'salary in usd'},template='ggplot2',text='salary_in_usd',title='<b> Top 10 Highest Paid Roles in Data Science')
fig.show()

px.violin(
    df,x='work_year',y='salary_in_usd',color='work_year',labels={'work_year':'year','salary_in_usd':'salary in usd'},
    template='seaborn',title='<b>Data Science Salaries by year'
)

px.box(
    df,x='experience_level',y='salary_in_usd',color='experience_level',
    template='ggplot2',labels={'experience_level':'Experience Level','salary_in_usd':'salary in usd'},
    title='<b>Data Sceince Salaries by Experience'
)

px.box(
    df,x='employment_type',y='salary_in_usd',color='employment_type',
    template='seaborn',labels={'employment_type':'Employment Type','salary_in_usd':'salary in usd'},
    title='<b>Data Sceince Salaries by type of employee'
)

px.box(
    df,x='company_size',y='salary_in_usd',color='company_size',
    template='ggplot2',labels={'company_size':'Company Size','salary_in_usd':'salary in usd'},
    title='<b>Data Sceince Salaries by Company Size'
)

# Menghitung gaji rata-rata berdasarkan tempat tinggal karyawan dengan memfilter 10 negara paling umum
top_employee_residence_salaries = df.groupby('employee_residence')['salary_in_usd'].mean().nlargest(10)

# Menghitung gaji rata-rata berdasarkan lokasi perusahaan dengan memfilter 10 lokasi paling umum
top_company_location_salaries = df.groupby('company_location')['salary_in_usd'].mean().nlargest(10)

# Menampilkan hasil kalkulasi
top_employee_residence_salaries, top_company_location_salaries

# Plotting
plt.figure(figsize=(16, 7))

# Rata-Rata Gaji Berdasarkan Tempat Tinggal Karyawan
plt.subplot(1, 2, 1)
sns.barplot(x=top_employee_residence_salaries.values, y=top_employee_residence_salaries.index, palette='mako')
plt.title('Top 10 Average Salaries by Employee Residence')
plt.xlabel('Average Salary in USD')
plt.ylabel('Country')

# Rata-Rata Gaji Berdasarakan Lokasi Perusahaan
plt.subplot(1, 2, 2)
sns.barplot(x=top_company_location_salaries.values, y=top_company_location_salaries.index, palette='mako')
plt.title('Top 10 Average Salaries by Company Location')
plt.xlabel('Average Salary in USD')
plt.ylabel('Country')

plt.tight_layout()
plt.show()

"""## **Preprocessing Data**"""

X = df[['experience_level','remote_ratio','company_size']]
y = df['salary_in_usd']

# one-hot encoding
X = pd.get_dummies(X, columns=['experience_level','company_size'])
X.head()

"""## **Train and Test Split Data**"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""## **Training Model**

### XGB Regressor
"""

# Import Library yang Diperlukan
import pandas as pd
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Persiapan Data
X = df[['experience_level', 'remote_ratio', 'company_size']]
y = df['salary_in_usd']
X = pd.get_dummies(X, columns=['experience_level', 'company_size'])

# Membagi Data Menjadi Data Latih dan Data Uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print(f'Bentuk data latih: {X_train.shape}, {y_train.shape}')
print(f'Bentuk data uji: {X_test.shape}, {y_test.shape}')

# Melatih Model Menggunakan XGBRegressor
model = XGBRegressor()
model.fit(X_train, y_train)

# Melakukan Prediksi Menggunakan Data Uji
y_pred = model.predict(X_test)

# Evaluasi Model Menggunakan Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

joblib.dump(y_pred, 'xgboost_model.joblib')

y_pred = joblib.load('/content/xgboost_model.joblib')

predictions = model.predict(X_test)
predictions